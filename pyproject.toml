[build-system]
# Build-time only. scikit-build-core drives CMake; setuptools-scm provides the version.
requires = ["scikit-build-core>=0.9", "setuptools-scm>=8"]
build-backend = "scikit_build_core.build"

[project]
name = "diskmint"
# Keep version from git tags (set via setuptools-scm below)
dynamic = ["version"]
description = "Self-consistent thermochemical disk model for individual targets (Python + external Fortran chemistry)."
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
  { name = "Dingshan Deng", email = "dingshandeng@arizona.edu" },
  { name = "Ruaud Maxime" },
  { name = "Uma Gorti" },
  { name = "Ilaria Pascucci" }
]

dependencies = [
  "numpy",
  "scipy",
]

# [project.optional-dependencies]
# dev  = ["pytest>=7", "pytest-cov", "ruff", "build", "twine"]
# docs = ["mkdocs-material"]

[project.urls]
Homepage = "https://github.com/DingshanDeng/DiskMINT"
Issues   = "https://github.com/DingshanDeng/DiskMINT/issues"

# # Optional: expose the Fortran runners as shell commands (keep/remove as you like)
# [project.scripts]
# diskmint-chem     = "diskmint.chemistry.runner:cli_chem"
# diskmint-extract  = "diskmint.chemistry.runner:cli_extract"

# -------------------------
# scikit-build-core config
# -------------------------
[tool.scikit-build]
# No special options needed for your layout; CMakeLists.txt at repo root will:
#  - compile chemistry/src/*.f90
#  - install the binaries into diskmint/bin inside the wheel
#  - (optionally) install template data into diskmint/share/chemistry

# If you want verbose CMake logs while building locally, uncomment:
# cmake.verbose = true

# -------------------------
# setuptools-scm (version from git tags, e.g. v1.5.0)
# -------------------------
[tool.setuptools_scm]
# Default config is fine; add `write_to = "src/diskmint/_version.py"` if you want a file.

# # --- setuptools config ---
# [tool.setuptools.packages.find]
# where = ["src"]

# [tool.setuptools]
# package-dir = { "" = "src" }
# license-files = ["LICENSE*"]

# # Include small runtime data files that live *inside* the Python package.
# # (Adjust or remove if not needed.)
# [tool.setuptools.package-data]
# "diskmint" = ["data/**/*"]

# # setuptools_scm: version from git tags (e.g., v1.5.0)
# [tool.setuptools_scm]
# # (defaults usually suffice; you can add write_to if you want a _version.py file)
